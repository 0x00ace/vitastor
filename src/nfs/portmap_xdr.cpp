/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "portmap.h"
#include "xdr_impl_inline.h"

bool_t
xdr_pmap2_mapping (XDR *xdrs, pmap2_mapping *objp)
{
	

	if (xdrs->x_op == XDR_ENCODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->prot))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->port))
				 return FALSE;
		} else {
			IXDR_PUT_U_LONG(buf, objp->prog);
			IXDR_PUT_U_LONG(buf, objp->vers);
			IXDR_PUT_U_LONG(buf, objp->prot);
			IXDR_PUT_U_LONG(buf, objp->port);
		}
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->prot))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->port))
				 return FALSE;
		} else {
			objp->prog = IXDR_GET_U_LONG(buf);
			objp->vers = IXDR_GET_U_LONG(buf);
			objp->prot = IXDR_GET_U_LONG(buf);
			objp->port = IXDR_GET_U_LONG(buf);
		}
	 return TRUE;
	}

	 if (!xdr_u_int (xdrs, &objp->prog))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->vers))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->prot))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->port))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap2_call_args (XDR *xdrs, pmap2_call_args *objp)
{
	

	if (xdrs->x_op == XDR_ENCODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->proc))
				 return FALSE;

		} else {
		IXDR_PUT_U_LONG(buf, objp->prog);
		IXDR_PUT_U_LONG(buf, objp->vers);
		IXDR_PUT_U_LONG(buf, objp->proc);
		}
		 if (!xdr_bytes(xdrs, &objp->args, ~0))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->proc))
				 return FALSE;

		} else {
		objp->prog = IXDR_GET_U_LONG(buf);
		objp->vers = IXDR_GET_U_LONG(buf);
		objp->proc = IXDR_GET_U_LONG(buf);
		}
		 if (!xdr_bytes(xdrs, &objp->args, ~0))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_u_int (xdrs, &objp->prog))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->vers))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->proc))
		 return FALSE;
	 if (!xdr_bytes(xdrs, &objp->args, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap2_call_result (XDR *xdrs, pmap2_call_result *objp)
{
	
	 if (!xdr_u_int (xdrs, &objp->port))
		 return FALSE;
	 if (!xdr_bytes(xdrs, &objp->res, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap2_mapping_list (XDR *xdrs, pmap2_mapping_list *objp)
{
	
	 if (!xdr_pmap2_mapping (xdrs, &objp->map))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (pmap2_mapping_list), (xdrproc_t) xdr_pmap2_mapping_list))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap2_dump_result (XDR *xdrs, pmap2_dump_result *objp)
{
	
	 if (!xdr_pointer (xdrs, (char **)&objp->list, sizeof (pmap2_mapping_list), (xdrproc_t) xdr_pmap2_mapping_list))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_string_result (XDR *xdrs, pmap3_string_result *objp)
{
	
	 if (!xdr_string (xdrs, &objp->addr, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_mapping (XDR *xdrs, pmap3_mapping *objp)
{
	
	 if (!xdr_u_int (xdrs, &objp->prog))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->vers))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->netid, ~0))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->addr, ~0))
		 return FALSE;
	 if (!xdr_string (xdrs, &objp->owner, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_mapping_list (XDR *xdrs, pmap3_mapping_list *objp)
{
	
	 if (!xdr_pmap3_mapping (xdrs, &objp->map))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->next, sizeof (pmap3_mapping_list), (xdrproc_t) xdr_pmap3_mapping_list))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_dump_result (XDR *xdrs, pmap3_dump_result *objp)
{
	
	 if (!xdr_pointer (xdrs, (char **)&objp->list, sizeof (pmap3_mapping_list), (xdrproc_t) xdr_pmap3_mapping_list))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_call_args (XDR *xdrs, pmap3_call_args *objp)
{
	

	if (xdrs->x_op == XDR_ENCODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->proc))
				 return FALSE;

		} else {
		IXDR_PUT_U_LONG(buf, objp->prog);
		IXDR_PUT_U_LONG(buf, objp->vers);
		IXDR_PUT_U_LONG(buf, objp->proc);
		}
		 if (!xdr_bytes(xdrs, &objp->args, ~0))
			 return FALSE;
		return TRUE;
	} else if (xdrs->x_op == XDR_DECODE) {
				if (1) {
			 if (!xdr_u_int (xdrs, &objp->prog))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->vers))
				 return FALSE;
			 if (!xdr_u_int (xdrs, &objp->proc))
				 return FALSE;

		} else {
		objp->prog = IXDR_GET_U_LONG(buf);
		objp->vers = IXDR_GET_U_LONG(buf);
		objp->proc = IXDR_GET_U_LONG(buf);
		}
		 if (!xdr_bytes(xdrs, &objp->args, ~0))
			 return FALSE;
	 return TRUE;
	}

	 if (!xdr_u_int (xdrs, &objp->prog))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->vers))
		 return FALSE;
	 if (!xdr_u_int (xdrs, &objp->proc))
		 return FALSE;
	 if (!xdr_bytes(xdrs, &objp->args, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_call_result (XDR *xdrs, pmap3_call_result *objp)
{
	
	 if (!xdr_u_int (xdrs, &objp->port))
		 return FALSE;
	 if (!xdr_bytes(xdrs, &objp->res, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_pmap3_netbuf (XDR *xdrs, pmap3_netbuf *objp)
{
	
	 if (!xdr_u_int (xdrs, &objp->maxlen))
		 return FALSE;
	 if (!xdr_bytes(xdrs, &objp->buf, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2SETargs (XDR *xdrs, PMAP2SETargs *objp)
{
	
	 if (!xdr_pmap2_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2UNSETargs (XDR *xdrs, PMAP2UNSETargs *objp)
{
	
	 if (!xdr_pmap2_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2GETPORTargs (XDR *xdrs, PMAP2GETPORTargs *objp)
{
	
	 if (!xdr_pmap2_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2CALLITargs (XDR *xdrs, PMAP2CALLITargs *objp)
{
	
	 if (!xdr_pmap2_call_args (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2CALLITres (XDR *xdrs, PMAP2CALLITres *objp)
{
	
	 if (!xdr_pmap2_call_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP2DUMPres (XDR *xdrs, PMAP2DUMPres *objp)
{
	
	 if (!xdr_pmap2_dump_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3SETargs (XDR *xdrs, PMAP3SETargs *objp)
{
	
	 if (!xdr_pmap3_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3UNSETargs (XDR *xdrs, PMAP3UNSETargs *objp)
{
	
	 if (!xdr_pmap3_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3GETADDRargs (XDR *xdrs, PMAP3GETADDRargs *objp)
{
	
	 if (!xdr_pmap3_mapping (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3GETADDRres (XDR *xdrs, PMAP3GETADDRres *objp)
{
	
	 if (!xdr_pmap3_string_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3DUMPres (XDR *xdrs, PMAP3DUMPres *objp)
{
	
	 if (!xdr_pmap3_dump_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3CALLITargs (XDR *xdrs, PMAP3CALLITargs *objp)
{
	
	 if (!xdr_pmap3_call_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3CALLITres (XDR *xdrs, PMAP3CALLITres *objp)
{
	
	 if (!xdr_pmap3_call_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3UADDR2TADDRres (XDR *xdrs, PMAP3UADDR2TADDRres *objp)
{
	
	 if (!xdr_pmap3_netbuf (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3TADDR2UADDRargs (XDR *xdrs, PMAP3TADDR2UADDRargs *objp)
{
	
	 if (!xdr_pmap3_netbuf (xdrs, objp))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_PMAP3TADDR2UADDRres (XDR *xdrs, PMAP3TADDR2UADDRres *objp)
{
	
	 if (!xdr_pmap3_string_result (xdrs, objp))
		 return FALSE;
	return TRUE;
}
